观察者模式（发布-订阅模式）
定义：定义对象间一种一对多的依赖关系，每当一个对象改变状态时，则所有依赖于它的对象都会得到通知并被自动更新。

角色：
Subject--->抽象主题（抽象被观察者）。抽象主题将所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。
ConcreteSubject--->具体主题（具体被观察者）。该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。
Observer--->抽象观察者，是观察者的抽象类。它定义了一个更新接口，使得在得到主题更改通知时更新自己。
ConcreteObserver--->具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。

使用场景：
（1）、关联行为场景。需要注意的是，关联行为是可拆分的，而不是“组合关系”。
（2）、事件多级触发场景。
（3）、跨系统的消息交换场景，如消息队列、事件总线的处理机制。

优点：
（1）、观察者与被观察者之间是抽象耦合，容易扩展。
（2）、方便建立一套触发机制。

缺点：
需考虑开发效率和运行效率的问题，开发、调试等内容比较复杂，而且在Java中的消息通知一般是顺序执行的，那么一个观察者卡顿，会影响整体的执行效率，
在这种情况下，一般会采用异步方式。

